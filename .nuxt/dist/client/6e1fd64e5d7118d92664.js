(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{231:function(t,e,o){var content=o(317);"string"==typeof content&&(content=[[t.i,content,""]]),content.locals&&(t.exports=content.locals);(0,o(37).default)("7d00330f",content,!0,{sourceMap:!1})},305:function(t,e,o){t.exports=o.p+"img/04e238d.png"},306:function(t,e,o){t.exports=o.p+"img/3d3fe24.png"},307:function(t,e,o){t.exports=o.p+"img/5c675a2.png"},308:function(t,e,o){t.exports=o.p+"img/8f4c038.png"},309:function(t,e,o){t.exports=o.p+"img/789e8e0.png"},310:function(t,e,o){t.exports=o.p+"img/f82640c.png"},311:function(t,e,o){t.exports=o.p+"img/bac80c3.png"},312:function(t,e,o){t.exports=o.p+"img/bf929c4.png"},313:function(t,e,o){t.exports=o.p+"img/605fe48.png"},314:function(t,e,o){t.exports=o.p+"img/cf44a82.png"},315:function(t,e,o){t.exports=o.p+"img/fd0484f.png"},316:function(t,e,o){"use strict";var n=o(231);o.n(n).a},317:function(t,e,o){(e=o(36)(!1)).push([t.i,"*[data-v-bf6941ec]{margin:1rem 0}.content[data-v-bf6941ec]{overflow:scroll}h1[data-v-bf6941ec],h2[data-v-bf6941ec],h3[data-v-bf6941ec],h4[data-v-bf6941ec],h5[data-v-bf6941ec],h6[data-v-bf6941ec]{margin:.2rem .6rem 0 1.6rem;font-size:1.8rem}h2[data-v-bf6941ec]{margin-left:0}h4[data-v-bf6941ec]{text-indent:2rem}.txt-color-deeppink[data-v-bf6941ec]{color:#ff1493}.code[data-v-bf6941ec]{text-indent:2rem;margin:1rem 0;overflow-x:auto;padding:1rem 1rem 1rem 1.5rem;background-color:#eee;border-left:.4rem solid red}.code[data-v-bf6941ec],img[data-v-bf6941ec]{display:block;max-width:35rem}img[data-v-bf6941ec]{overflow-x:auto;overflow:scroll}.shell[data-v-bf6941ec],p[data-v-bf6941ec],span[data-v-bf6941ec]{max-width:35rem}.shell[data-v-bf6941ec]{background-color:#222;color:green;line-height:3.5rem;padding:1rem 3.5rem;overflow-x:auto}img[data-v-bf6941ec]{width:35rem}",""]),t.exports=e},383:function(t,e,o){"use strict";o.r(e);var n={data:function(){return{}}},r=(o(316),o(30)),component=Object(r.a)(n,(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("b-container",{staticClass:"bv-example-row",attrs:{fluid:""}},[n("b-row",[n("b-col",{attrs:{sm:"0",md:"2",lg:"2",xl:"4"}}),t._v(" "),n("b-col",{attrs:{sm:"12",md:"8",lg:"7",xl:"5"}},[n("h2",[t._v("vue/vuex之Action")]),t._v(" "),n("hr"),t._v(" "),n("br"),t._v(" "),n("p",{staticClass:"code"},[t._v("更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数：")]),t._v(" "),n("img",{attrs:{src:o(305),alt:""}}),t._v(" "),n("p",[t._v("你不能直接调用一个 mutation handler。这个选项更像是事件注册：“当触发一个类型为 increment 的 mutation 时，调用此函数。”要唤醒一个 mutation handler，你需要以相应的 type 调用 store.commit 方法：")]),t._v(" "),n("img",{attrs:{src:o(306),alt:""}}),t._v(" "),n("h5",{staticClass:"txt-color-deeppink"},[t._v("Payload")]),t._v(" "),n("p",[t._v("你可以向 store.commit 传入额外的参数，即 mutation 的 载荷（payload）：")]),t._v(" "),n("img",{attrs:{src:o(307),alt:""}}),t._v(" "),n("p",[t._v("在大多数情况下，载荷应该是一个对象，这样可以包含多个字段并且记录的 mutation 会更易读：")]),t._v(" "),n("img",{attrs:{src:o(308),alt:""}}),t._v(" "),n("p",[t._v("对象风格的提交方式")]),t._v(" "),n("span",[t._v("提交 mutation 的另一种方式是直接使用包含 type 属性的对象：")]),t._v(" "),n("img",{attrs:{src:o(309),alt:""}}),t._v(" "),n("p",[t._v("当使用对象风格的提交方式，整个对象都作为载荷传给 mutation 函数，因此 handler 保持不变：")]),t._v(" "),n("img",{attrs:{src:o(310),alt:""}}),t._v(" "),n("h4",{staticClass:"txt-color-deeppink"},[t._v("Mutation 需遵守 Vue 的响应规则")]),t._v(" "),n("br"),t._v(" "),n("span",[n("p",[t._v("既然 Vuex 的 store 中的状态是响应式的，那么当我们变更状态时，监视状态的 Vue 组件也会自动更新。这也意味着 Vuex 中的 mutation 也需要与使用 Vue 一样遵守一些注意事项：")]),t._v(" "),n("ol",[n("li",[t._v("最好提前在你的 store 中初始化好所有所需属性。")]),t._v(" "),n("li",[t._v("当需要在对象上添加新属性时，你应该")])]),t._v(" "),n("ul",[n("li",[t._v("使用 Vue.set(obj, 'newProp', 123), 或者")]),t._v(" "),n("li",[t._v("\n              以新对象替换老对象。例如，利用\n              "),n("a",{attrs:{href:"https://github.com/tc39/proposal-object-rest-spread"}},[t._v("对象展开运算符")]),t._v(" 我们可以这样写：\n            ")])]),t._v(" "),n("img",{attrs:{src:o(311),alt:""}})]),t._v(" "),n("h5",[t._v("使用常量替代 Mutation 事件类型")]),t._v(" "),n("p",[t._v("使用常量替代 mutation 事件类型在各种 Flux 实现中是很常见的模式。这样可以使 linter 之类的工具发挥作用，同时把这些常量放在单独的文件中可以让你的代码合作者对整个 app 包含的 mutation 一目了然：")]),t._v(" "),n("img",{attrs:{src:o(312),alt:""}}),t._v(" "),n("p",[t._v("用不用常量取决于你——在需要多人协作的大型项目中，这会很有帮助。但如果你不喜欢，你完全可以不这样做。")]),t._v(" "),n("h5",[t._v("Mutation 必须是同步函数")]),t._v(" "),n("p",{staticClass:"code"},[t._v("一条重要的原则就是要记住 mutation 必须是同步函数。为什么？请参考下面的例子：")]),t._v(" "),n("img",{attrs:{src:o(313),alt:""}}),t._v(" "),n("p",[t._v("\n          现在想象，我们正在 debug 一个 app 并且观察 devtool 中的 mutation 日志。每一条 mutation 被记录，devtools 都需要捕捉到前一状态和后一状态的快照。然而，在上面的例子中 mutation 中的异步函数中的回调让这不可能完成：因为当 mutation 触发的时候，回调函数还没有被调用，devtools 不知道什么时候回调函数实际上被调用——实质上任何在回调函数中进行的状态的改变都是不可追踪的。\n        ")]),t._v(" "),n("h5",[t._v("\n          在组件中提交 Mutation\n        ")]),t._v(" "),n("p",[t._v("\n          你可以在组件中使用 "),n("span",{staticClass:"txt-color-deeppink"},[t._v("this.$store.commit('xxx')")]),t._v("  提交 "),n("span",{staticClass:"txt-color-deeppink"},[t._v("mutation")]),t._v(" ，或者使用 "),n("span",{staticClass:"txt-color-deeppink"},[t._v("mutation")]),t._v(" 辅助函数将组件中的 methods 映射为 store.commit 调用（需要在根节点注入 store）。\n        ")]),t._v(" "),n("img",{attrs:{src:o(314),alt:""}}),t._v(" "),n("h5",[t._v("下一步：Action")]),t._v(" "),n("p",[t._v("\n    在 mutation 中混合异步调用会导致你的程序很难调试。例如，当你调用了两个包含异步回调的 mutation 来改变状态，你怎么知道什么时候回调和哪个先回调呢？这就是为什么我们要区分这两个概念。在 Vuex 中，"),n("i",[t._v(" mutation 都是同步事务：")])]),t._v(" "),n("img",{attrs:{src:o(315),alt:""}}),t._v(" "),n("p",[t._v("\n    为了处理异步操作，让我们来看一看 "),n("nuxt-link",{attrs:{to:"vuex之Action"}},[t._v("Action")]),t._v(" 。\n  ")],1)]),t._v(" "),n("b-col",{attrs:{sm:"0",md:"2",lg:"2",xl:"3"}})],1)],1)}),[],!1,null,"bf6941ec",null);e.default=component.exports}}]);