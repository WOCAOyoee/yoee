(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{230:function(t,n,o){var content=o(304);"string"==typeof content&&(content=[[t.i,content,""]]),content.locals&&(t.exports=content.locals);(0,o(37).default)("5927b93e",content,!0,{sourceMap:!1})},292:function(t,n,o){t.exports=o.p+"img/47aca77.png"},293:function(t,n,o){t.exports=o.p+"img/ffb512a.png"},294:function(t,n,o){t.exports=o.p+"img/acb7247.png"},295:function(t,n,o){t.exports=o.p+"img/8c9947d.png"},296:function(t,n,o){t.exports=o.p+"img/b8010e6.png"},297:function(t,n,o){t.exports=o.p+"img/a12d61b.png"},298:function(t,n,o){t.exports=o.p+"img/62a18b7.png"},299:function(t,n,o){t.exports=o.p+"img/bd121b9.png"},300:function(t,n,o){t.exports=o.p+"img/b814775.png"},301:function(t,n,o){t.exports=o.p+"img/29781d8.png"},302:function(t,n,o){t.exports=o.p+"img/ca55d3d.png"},303:function(t,n,o){"use strict";var e=o(230);o.n(e).a},304:function(t,n,o){(n=o(36)(!1)).push([t.i,"*[data-v-26913f64]{margin:1rem 0}.content[data-v-26913f64]{overflow:scroll}h1[data-v-26913f64],h2[data-v-26913f64],h3[data-v-26913f64],h4[data-v-26913f64],h5[data-v-26913f64],h6[data-v-26913f64]{margin:.2rem .6rem 0 1.6rem;font-size:1.8rem}h2[data-v-26913f64]{margin-left:0}h4[data-v-26913f64]{text-indent:2rem}.txt-color-deeppink[data-v-26913f64]{color:#ff1493}.code[data-v-26913f64]{text-indent:2rem;margin:1rem 0;overflow-x:auto;padding:1rem 1rem 1rem 1.5rem;background-color:#eee;border-left:.4rem solid red}.code[data-v-26913f64],img[data-v-26913f64]{display:block;max-width:35rem}img[data-v-26913f64]{overflow-x:auto;overflow:scroll}.shell[data-v-26913f64],p[data-v-26913f64],span[data-v-26913f64]{max-width:35rem}.shell[data-v-26913f64]{background-color:#222;color:green;line-height:3.5rem;padding:1rem 3.5rem;overflow-x:auto}img[data-v-26913f64]{width:35rem}",""]),t.exports=n},382:function(t,n,o){"use strict";o.r(n);var e={data:function(){return{}}},r=(o(303),o(30)),component=Object(r.a)(e,(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("b-container",{staticClass:"bv-example-row",attrs:{fluid:""}},[e("b-row",[e("b-col",{attrs:{sm:"0",md:"2",lg:"2",xl:"4"}}),t._v(" "),e("b-col",{attrs:{sm:"12",md:"8",lg:"7",xl:"5"}},[e("h2",[t._v("vue/vuex之Action")]),t._v(" "),e("hr"),t._v(" "),e("br"),t._v(" "),e("p",[t._v("Action 类似于 mutation，不同在于：")]),t._v(" "),e("ul",[e("li",[t._v("Action 提交的是 mutation，而不是直接变更状态。")]),t._v(" "),e("li",[t._v("Action 可以包含任意异步操作。")])]),t._v(" "),e("p",[t._v("让我们来注册一个简单的 action：")]),t._v(" "),e("img",{attrs:{src:o(292),alt:""}}),t._v(" "),e("p",[e("span",[t._v("Action")]),t._v(" 函数接受一个与\n        "),e("span",[t._v("store")]),t._v(" 实例具有相同方法和属性的\n        "),e("span",[t._v("context")]),t._v(" 对象，因此你可以调用\n        "),e("span",{staticClass:"txt-color-deeppink"},[t._v("context.commit")]),t._v(" 提交一个\n        "),e("span",[t._v("mutation")]),t._v(" ，或者通过\n        "),e("span",{staticClass:"txt-color-deeppink"},[t._v("context.state")]),t._v(" 和\n        "),e("span",{staticClass:"txt-color-deeppink"},[t._v("context.getters")]),t._v(" 来获取\n        "),e("span",[t._v("state")]),t._v(" 和\n        "),e("span",[t._v("getters")]),t._v(" 。当我们在之后介绍到\n        "),e("a",{attrs:{href:"https://vuex.vuejs.org/zh/guide/modules.html"}},[t._v("Modules")]),t._v(" 时，你就知道\n        "),e("span",[t._v("context")]),t._v(" 对象为什么不是\n        "),e("span",[t._v("store")]),t._v(" 实例本身了。\n      ")]),t._v(" "),e("p",[t._v("\n        实践中，我们会经常用到 ES2015 的\n        "),e("a",{attrs:{href:"https://github.com/lukehoban/es6features#destructuring"}},[t._v("参数解构")]),t._v(" 来简化代码（特别是我们需要调用 commit 很多次的时候）：\n      ")]),t._v(" "),e("img",{attrs:{src:o(293),alt:""}}),t._v(" "),e("p",{staticClass:"code"},[t._v("Action 通过 store.dispatch 方法触发：")]),t._v(" "),e("img",{attrs:{src:o(294),alt:""}}),t._v(" "),e("p",[t._v("\n        乍一眼看上去感觉多此一举，我们直接分发\n        "),e("span",{staticClass:"txt-color-deeppink"},[t._v("mutation")]),t._v(" 岂不更方便？实际上并非如此，还记得\n        "),e("span",{staticClass:"txt-color-deeppink"},[t._v("mutation")]),t._v(" 必须同步执行这个限制么？\n        "),e("span",{staticClass:"txt-color-deeppink"},[t._v("Action")]),t._v(" 就不受约束！我们可以在 action 内部执行异步操作：\n      ")]),t._v(" "),e("img",{attrs:{src:o(295),alt:""}}),t._v(" "),e("p",[t._v("Actions 支持同样的载荷方式和对象方式进行分发：")]),t._v(" "),e("img",{attrs:{src:o(296),alt:""}}),t._v(" "),e("p",[t._v("来看一个更加实际的购物车示例，涉及到调用异步 API 和分发多重 mutation：")]),t._v(" "),e("img",{attrs:{src:o(297),alt:""}}),t._v(" "),e("p",[t._v("在组件中分发 Action")]),t._v(" "),e("p",{staticClass:"code"},[t._v("你在组件中使用 this.$store.dispatch('xxx') 分发 action，或者使用 mapActions 辅助函数将组件的 methods 映射为 store.dispatch 调用（需要先在根节点注入 store）：")]),t._v(" "),e("img",{attrs:{src:o(298),alt:""}}),t._v(" "),e("p",[t._v("\n        Action 通常是异步的，那么如何知道 action 什么时候结束呢？更重要的是，我们如何才能组合多个 action，以处理更加复杂的异步流程？\n        "),e("span",[t._v("首先，你需要明白 store.dispatch 可以处理被触发的 action 的处理函数返回的 Promise，并且 store.dispatch 仍旧返回 Promise：")])]),t._v(" "),e("img",{attrs:{src:o(299),alt:""}}),t._v(" "),e("p",[t._v("现在你可以：")]),t._v(" "),e("img",{attrs:{src:o(300),alt:""}}),t._v(" "),e("p",[t._v("在另外一个 action 中也可以：")]),t._v(" "),e("img",{attrs:{src:o(301),alt:""}}),t._v(" "),e("p",[t._v("\n        最后，如果我们利用\n        "),e("a",{attrs:{href:"https://tc39.github.io/ecmascript-asyncawait/"}},[t._v("async/await")]),t._v(" ，我们可以如下组合 action：\n      ")]),t._v(" "),e("img",{attrs:{src:o(302),alt:""}}),t._v(" "),e("p",{staticClass:"code"},[t._v("一个 store.dispatch 在不同模块中可以触发多个 action 函数。在这种情况下，只有当所有触发函数完成后，返回的 Promise 才会执行。")])]),t._v(" "),e("b-col",{attrs:{sm:"0",md:"2",lg:"2",xl:"3"}})],1)],1)}),[],!1,null,"26913f64",null);n.default=component.exports}}]);